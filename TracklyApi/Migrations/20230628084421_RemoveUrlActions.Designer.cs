// <auto-generated />
using System;
using System.Net;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TracklyApi.Entities;

#nullable disable

namespace TracklyApi.Migrations
{
    [DbContext(typeof(TracklyDbContext))]
    [Migration("20230628084421_RemoveUrlActions")]
    partial class RemoveUrlActions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TracklyApi.Entities.EmailConfirmation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("ConfirmationType")
                        .HasColumnType("integer")
                        .HasColumnName("confirmation_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExpiresIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_in");

                    b.Property<int>("User")
                        .HasColumnType("integer")
                        .HasColumnName("user");

                    b.HasKey("Id")
                        .HasName("pk_email_confirmations");

                    b.HasIndex(new[] { "User" }, "IXFK_email_confirmations_users")
                        .HasDatabaseName("ix_email_confirmations_user");

                    b.ToTable("email_confirmations", (string)null);
                });

            modelBuilder.Entity("TracklyApi.Entities.ManagedUrl", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("description");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("NewPath")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("new_path");

                    b.Property<string>("TargetUrl")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("target_url");

                    b.Property<long>("TotalClicks")
                        .HasColumnType("bigint")
                        .HasColumnName("total_clicks");

                    b.Property<int>("User")
                        .HasColumnType("integer")
                        .HasColumnName("user");

                    b.HasKey("Id")
                        .HasName("pk_managed_urls");

                    b.HasIndex(new[] { "User" }, "IXFK_managed_urls_users")
                        .HasDatabaseName("ix_managed_urls_user");

                    b.HasIndex(new[] { "NewPath" }, "UNQ_new_path")
                        .IsUnique()
                        .HasDatabaseName("ix_managed_urls_new_path");

                    b.ToTable("managed_urls", (string)null);
                });

            modelBuilder.Entity("TracklyApi.Entities.RefreshSession", b =>
                {
                    b.Property<Guid>("RefreshToken")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExpiresIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_in");

                    b.Property<string>("Fingerprint")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("fingerprint");

                    b.Property<int>("User")
                        .HasColumnType("integer")
                        .HasColumnName("user");

                    b.HasKey("RefreshToken")
                        .HasName("pk_refresh_sessions");

                    b.HasIndex(new[] { "RefreshToken" }, "INDX_refresh_session")
                        .HasDatabaseName("ix_refresh_sessions_refresh_token");

                    b.HasIndex(new[] { "User" }, "IXFK_refresh_sessions_users")
                        .HasDatabaseName("ix_refresh_sessions_user");

                    b.ToTable("refresh_sessions", (string)null);
                });

            modelBuilder.Entity("TracklyApi.Entities.UrlVisit", b =>
                {
                    b.Property<long>("Url")
                        .HasColumnType("bigint")
                        .HasColumnName("url");

                    b.Property<DateTime>("VisitTimestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("visit_timestamp");

                    b.Property<string>("BrowserFingerprint")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("browser_fingerprint");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("country_code");

                    b.Property<IPAddress>("IpAddress")
                        .IsRequired()
                        .HasColumnType("inet")
                        .HasColumnName("ip_address");

                    b.HasKey("Url", "VisitTimestamp")
                        .HasName("pk_url_visits");

                    b.HasIndex(new[] { "CountryCode" }, "IXFK_url_visits_countries")
                        .HasDatabaseName("ix_url_visits_country_code");

                    b.HasIndex(new[] { "Url" }, "IXFK_url_visits_managed_urls")
                        .HasDatabaseName("ix_url_visits_url");

                    b.ToTable("url_visits", (string)null);
                });

            modelBuilder.Entity("TracklyApi.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("first_name");

                    b.Property<bool?>("IsEmailVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_email_verified");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_access_date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("middle_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("password");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registration_date");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex(new[] { "Email" }, "UNQ_email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("TracklyApi.Entities.EmailConfirmation", b =>
                {
                    b.HasOne("TracklyApi.Entities.User", "UserNavigation")
                        .WithMany("EmailConfirmations")
                        .HasForeignKey("User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_email_confirmations_users");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("TracklyApi.Entities.ManagedUrl", b =>
                {
                    b.HasOne("TracklyApi.Entities.User", "UserNavigation")
                        .WithMany("ManagedUrls")
                        .HasForeignKey("User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_managed_urls_users");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("TracklyApi.Entities.RefreshSession", b =>
                {
                    b.HasOne("TracklyApi.Entities.User", "UserNavigation")
                        .WithMany("RefreshSessions")
                        .HasForeignKey("User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_refresh_sessions_users");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("TracklyApi.Entities.UrlVisit", b =>
                {
                    b.HasOne("TracklyApi.Entities.ManagedUrl", "UrlNavigation")
                        .WithMany("UrlVisits")
                        .HasForeignKey("Url")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_url_visits_managed_urls");

                    b.Navigation("UrlNavigation");
                });

            modelBuilder.Entity("TracklyApi.Entities.ManagedUrl", b =>
                {
                    b.Navigation("UrlVisits");
                });

            modelBuilder.Entity("TracklyApi.Entities.User", b =>
                {
                    b.Navigation("EmailConfirmations");

                    b.Navigation("ManagedUrls");

                    b.Navigation("RefreshSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
